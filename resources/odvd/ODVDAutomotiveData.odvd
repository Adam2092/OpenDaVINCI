/*
 * AutomotiveData.odvd - Data structures for automotive applications.
 * Copyright (C) 2015 - 2016 Christian Berger 
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */


///////////////////////////////////////////////////////////////////////////////
message cartesian.Matrix3x3 [id = 52] {
    double XX [id = 1];
    double XY [id = 2];
    double XZ [id = 3];
    double YX [id = 4];
    double YY [id = 5];
    double YZ [id = 6];
    double ZX [id = 7];
    double ZY [id = 8];
    double ZZ [id = 9];
}

message geodetic.WGS84 [id = 19] {
  double latitude [id = 1];
  double longitude [id = 3];
}

///////////////////////////////////////////////////////////////////////////////
// Messages describing entities in the Cartesian environment.
message cartesian.Point2 [id = 51] {
    float p[2] [id = 1];
}

message cartesian.Position [id = 53] {
    cartesian.Point2 position [id = 1];
    cartesian.Point2 rotation [id = 2];
}

message cartesian.Constants [id = 50] {
    const double PI = 3.141592653589793;
    const double DEG2RAD = 0.017453292522222;  // PI/180.0
    const double RAD2DEG = 57.295779513082325; // 1.0 / DEG2RAD;
}


///////////////////////////////////////////////////////////////////////////////
// Generic automotive messages.
message automotive.Constants [id = 60] {
    const double MS2KMH = 3.6;
    const double KMH2MS = 0.277777777777778; // 1.0 / MS2KMH;
    const double G = 9.81;
}

message automotive.GenericCANMessage [id = 71] {
    odcore::data::TimeStamp driverTimeStamp [id = 1]; // TimeStamp from CAN driver.
    uint64 identifier [id = 2];                       // ID of the CAN message. 
    uint8 length [id = 3];                            // Number of data bytes (1-8).
    uint64 data [id = 4];                             // Payload of the CAN message.
}

