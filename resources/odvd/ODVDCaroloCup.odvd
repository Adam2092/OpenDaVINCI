/*
 * ODVDCaroloCup.odvd - Data structures for CaroloCup.
 * Copyright (C) 2015 - 2017 Christian Berger 
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

///////////////////////////////////////////////////////////////////////////////
message automotive.VehicleData [id = 39] {
    double heading [id = 3];
    double absTraveledPath [id = 4];
    double relTraveledPath [id = 5];
    double speed [id = 6];
    double v_log [id = 7];
    double v_batt [id = 8];
    double temp [id = 9];
}

message automotive.VehicleControl [id = 41] {
    double speed [id = 1];
    double acceleration [id = 2];
    double steeringWheelAngle [id = 3];
    bool brakeLights [id = 4];
    bool flashingLightsLeft [id = 5];
    bool flashingLightsRight [id = 6];
}

message automotive.ForceControl [id = 33] {
    double accelerationForce [id = 1];
    double brakeForce [id = 2];
    double steeringForce [id = 3];
    bool brakeLights [id = 4];
    bool flashingLightsLeft [id = 5];
    bool flashingLightsRight [id = 6];
}

message automotive.miniature.SteeringData [id = 80] {
    double exampleData [id = 1];
}

message automotive.miniature.SensorBoardData [id = 81] {
    uint32 numberOfSensors [id = 1];
    map<uint32, double> distances [id = 2];
}

message automotive.miniature.STM32F4Control [id = 82] {
    uint32 dataFeed [id = 1];
}

message automotive.miniature.STM32F4Data [id = 83] {
    string rawData [id = 1];
}

message automotive.miniature.UserButtonData [id = 84] {
    enum ButtonStatus {
        UNDEFINED = -1,
        RELEASED = 0,
        PRESSED = 1,
    };
    ButtonStatus buttonStatus [id = 1];
    double duration [id = 2];
}

message automotive.carolocup.Sensors [id = 87] {
    uint32 usFront [id = 1];
    uint32 usRear [id = 2];
    uint32 irFrontRight [id = 3];
    uint32 irRearRight [id = 4];
    uint32 irBackLeft [id = 5];
    uint32 irBackRight [id = 6];
    uint32 gyroHeading [id = 7];
    uint32 wheelRearLeft [id = 8];
    uint32 wheelRearRight [id = 9];
    uint32 buttonState [id = 10];
    uint32 lightReading [id = 11];
}

message automotive.carolocup.Control [id = 88] {
    uint32 steering [id = 1];
    uint32 speed [id = 2];
    uint32 lights [id = 3]; // 0 = no lights, 1 = brake lights, 2 = blinking left, 4 = blinking right, 8 = emergency light
    uint32 gyroTrigger [id = 4];
}

message automotive.vehicle.WheelSpeed [id = 75] {
    float frontLeft [id = 1];
    float frontRight [id = 2];
    float rearLeft [id = 3];
    float rearRight [id = 4];
}

message automotive.vehicle.LightSystem [id = 76] {
    int8 headlights [id = 1];
}
