/*
 * AutomotiveData.odvd - Data structures for automotive applications.
 * Copyright (C) 2015 Christian Berger 
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */


///////////////////////////////////////////////////////////////////////////////
// Other messages.
message cartesian.Matrix3x3 [id = 52] {
    double XX;
    double XY;
    double XZ;
    double YX;
    double YY;
    double YZ;
    double ZX;
    double ZY;
    double ZZ;
}


///////////////////////////////////////////////////////////////////////////////
// Messages describing entities in the Cartesian environment.
message cartesian.Point2 [id = 51] {
    float p[2];
}

message cartesian.Position [id = 53] {
    cartesian.Point2 position;
    cartesian.Point2 rotation;
}

message cartesian.Constants [id = 50] {
    const double PI = 3.141592653589793;
    const double DEG2RAD = 0.017453292522222;  // PI/180.0
    const double RAD2DEG = 57.295779513082325; // 1.0 / DEG2RAD;
}


///////////////////////////////////////////////////////////////////////////////
// Generic automotive messages.
message automotive.Constants [id = 60] {
    const double MS2KMH = 3.6;
    const double KMH2MS = 0.277777777777778; // 1.0 / MS2KMH;
    const double G = 9.81;
}

message automotive.VehicleData [id = 39] {
    cartesian.Point2 position;
    cartesian.Point2 velocity;
    double heading;
    double absTraveledPath;
    double relTraveledPath;
    double speed;
    double v_log;
    double v_batt;
    double temp;
}

message automotive.VehicleControl [id = 41] {
    double speed [fourbyteid = 0x0E43596B];
    double acceleration [fourbyteid = 0x0E435991];
    double steeringWheelAngle [fourbyteid = 0x0E435969];
    bool brakeLights [fourbyteid = 0x0E43599B];
    bool flashingLightsLeft [fourbyteid = 0x09823BD7];
    bool flashingLightsRight [fourbyteid = 0x0E435996];
}

message automotive.ForceControl [id = 33] {
    double accelerationForce [fourbyteid = 0x0E435991];
    double brakeForce [fourbyteid = 0x0E43598D];
    double steeringForce [fourbyteid = 0x0E435969];
    bool brakeLights [fourbyteid = 0x0E43599B];
    bool flashingLightsLeft [fourbyteid = 0x09823BD7];
    bool flashingLightsRight [fourbyteid = 0x0E435996];
}


///////////////////////////////////////////////////////////////////////////////
// Miniature car messages.
message automotive.miniature.SteeringData [id = 80] {
    double exampleData;
}

message automotive.miniature.STM32F4Control [id = 82] {
    uint32 dataFeed;
}

message automotive.miniature.STM32F4Data [id = 83] {
    string rawData;
}

message automotive.miniature.UserButtonData [id = 84] {
    enum ButtonStatus {
        UNDEFINED = -1,
        RELEASED = 0,
        PRESSED = 1,
    };
    ButtonStatus buttonStatus;
    double duration;
}

message automotive.miniature.SensorBoardData [id = 81] {
    uint32 numberOfSensors;
    map<uint32, double> distances;
}


///////////////////////////////////////////////////////////////////////////////
// Vehicle messages.
message automotive.GenericCANMessage [id = 71] {
    core::data::TimeStamp driverTimeStamp; // TimeStamp from CAN driver.
    uint64 identifier;                     // ID of the CAN message. 
    uint8 length;                          // Number of data bytes (1-8).
    uint64 data;                           // Payload of the CAN message.
}

